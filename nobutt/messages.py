# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2024-06-16T17:48:41+00:00

from __future__ import annotations

from enum import Enum
from typing import List

from pydantic import BaseModel, ConfigDict, Field, RootModel


class LogLevel(Enum):
    off = 'Off'
    fatal = 'Fatal'
    error = 'Error'
    warn = 'Warn'
    info = 'Info'
    debug = 'Debug'
    trace = 'Trace'


class Vector(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    index: int = Field(..., alias='Index', description='Linear actuator number.', ge=0)
    duration: float = Field(
        ...,
        alias='Duration',
        description='Linear movement time in milliseconds.',
        ge=0.0,
    )
    position: float = Field(
        ...,
        alias='Position',
        description='Linear movement position (floating point, 0 < x < 1), stepping will be device specific.',
        ge=0.0,
        le=1.0,
    )


class Rotation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    index: int = Field(..., alias='Index', description='Rotator number.', ge=0)
    speed: float = Field(
        ...,
        alias='Speed',
        description='Rotation speed (floating point, 0 < x < 1), stepping will be device specific.',
        ge=0.0,
        le=1.0,
    )
    clockwise: bool = Field(
        ...,
        alias='Clockwise',
        description='Rotation direction (boolean). Not all devices have a concept of actual clockwise.',
    )


class Speed(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    index: int = Field(..., alias='Index', description='Vibrator number.', ge=0)
    speed: float = Field(
        ...,
        alias='Speed',
        description='Vibration speed (floating point, 0 < x < 1), stepping will be device specific.',
        ge=0.0,
        le=1.0,
    )


class Datum(RootModel[int]):
    root: int = Field(..., ge=0, le=255)


class Scalar(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    index: int = Field(..., alias='Index', description='Actuator index.', ge=0)
    scalar: float = Field(
        ...,
        alias='Scalar',
        description='Actuator scalar (floating point, range can vary), stepping will be device specific.',
    )
    actuator_type: str = Field(
        ...,
        alias='ActuatorType',
        description='Actuator type that is expected to be controlled with this subcommand.',
    )


class ClientId(RootModel[int]):
    root: int = Field(
        ...,
        description='User-set id for the message. 0 denotes system message and is reserved.',
        ge=1,
        le=4294967295,
    )


class ClientIdMessage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')


class DeviceIndex(RootModel[int]):
    root: int = Field(
        ...,
        description='Index used for referencing the device in device messages.',
        ge=0,
    )


class DeviceMessagesV0Enum(str, Enum):
    fleshlight_launch_fw12_cmd = 'FleshlightLaunchFW12Cmd'
    single_motor_vibrate_cmd = 'SingleMotorVibrateCmd'
    kiiroo_cmd = 'KiirooCmd'
    lovense_cmd = 'LovenseCmd'
    vorze_a10_cyclone_cmd = 'VorzeA10CycloneCmd'


class DeviceMessagesV0(RootModel[List[DeviceMessagesV0Enum]]):
    root: List[DeviceMessagesV0Enum] = Field(
        ...,
        description='A list of the messages a device will accept on this server implementation.',
    )


class DeviceName(RootModel[str]):
    root: str = Field(..., description='Name of the device')


class ServerId(RootModel[int]):
    root: int = Field(
        ...,
        description='User-set id for the message. 0 denotes system message and is reserved.',
        ge=0,
        le=4294967295,
    )


class SystemId(RootModel[int]):
    root: int = Field(
        ...,
        description='Used for non-direct-reply messages that can only be sent from server to client, using the reserved system message Id of 0.',
        ge=0,
        le=0,
    )


class SystemIdDeviceIndexMessage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: SystemId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')


class SystemIdMessage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: SystemId = Field(..., alias='Id')


class NullMessageAttributes(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class RawMessageAttributes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endpoints: List[str] | None = Field(None, alias='Endpoints', min_length=1)


class FeatureCount(RootModel[int]):
    root: int = Field(..., description='Number of features on device.', ge=1)


class RangeInclusiveItem(RootModel[int]):
    root: int = Field(..., max_length=2, min_length=2)


class RangeInclusive(RootModel[List[RangeInclusiveItem]]):
    root: List[RangeInclusiveItem] = Field(
        ..., description="Serialization of Rust's RangeInclusive Type"
    )


class StepCountV2Item(RootModel[int]):
    root: int = Field(..., ge=1)


class StepCountV2(RootModel[List[StepCountV2Item]]):
    root: List[StepCountV2Item] = Field(
        ...,
        description='Specifies granularity of each feature on the device.',
        min_length=1,
    )


class StepCountV3(RootModel[int]):
    root: int = Field(
        ..., description='Specifies granularity of each feature on the device.', ge=1
    )


class DeviceAdded(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: SystemId = Field(..., alias='Id')
    device_name: DeviceName = Field(..., alias='DeviceName')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    device_messages: DeviceMessagesV0 = Field(..., alias='DeviceMessages')


class Device(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    device_name: DeviceName = Field(..., alias='DeviceName')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    device_messages: DeviceMessagesV0 = Field(..., alias='DeviceMessages')


class DeviceList(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    devices: List[Device] = Field(
        ..., alias='Devices', description='Array of device ids and names.'
    )


class DeviceRemoved(RootModel[SystemIdDeviceIndexMessage]):
    root: SystemIdDeviceIndexMessage = Field(
        ...,
        description='Notifies client that a device of a certain type has been removed from the server.',
    )


class Error(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ServerId = Field(..., alias='Id')
    error_message: str = Field(..., alias='ErrorMessage')
    error_code: float = Field(..., alias='ErrorCode', ge=0.0, le=4.0)


class FleshlightLaunchFW12Cmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    speed: int = Field(
        ...,
        alias='Speed',
        description='Speed at which to move to designated position.',
        ge=0,
        le=99,
    )
    position: int = Field(
        ...,
        alias='Position',
        description='Position to which to move Fleshlight.',
        ge=0,
        le=99,
    )


class KiirooCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    command: str = Field(
        ..., alias='Command', description='Command to send to Kiiroo device.'
    )


class Log(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: SystemId = Field(..., alias='Id')
    log_level: LogLevel = Field(
        ..., alias='LogLevel', description='Log level of message.'
    )
    log_message: str = Field(
        ..., alias='LogMessage', description='Log message from server.'
    )


class Ok(RootModel[ClientIdMessage]):
    root: ClientIdMessage = Field(
        ...,
        description='Signifies successful processing of the message indicated by the id.',
    )


class Ping(RootModel[ClientIdMessage]):
    root: ClientIdMessage = Field(..., description='Connection keep-alive message.')


class RequestDeviceList(RootModel[ClientIdMessage]):
    root: ClientIdMessage = Field(
        ...,
        description='Request for the server to send a list of devices to the client.',
    )


class RequestLog(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    log_level: LogLevel = Field(
        ..., alias='LogLevel', description='Maximum level of log message to receive.'
    )


class RequestServerInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    client_name: str = Field(
        ..., alias='ClientName', description='Name of the client software.'
    )


class ScanningFinished(RootModel[SystemIdMessage]):
    root: SystemIdMessage = Field(
        ..., description='Server notification to client that scanning has ended.'
    )


class ServerInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    server_name: str = Field(
        ..., alias='ServerName', description='Name of the server. Can be 0-length.'
    )
    message_version: int = Field(
        ...,
        alias='MessageVersion',
        description='Message template version of the server software.',
        ge=0,
    )
    major_version: int = Field(
        ..., alias='MajorVersion', description='Major version of server.', ge=0
    )
    minor_version: int = Field(
        ..., alias='MinorVersion', description='Minor version of server.', ge=0
    )
    build_version: int = Field(
        ..., alias='BuildVersion', description='Build version of server.', ge=0
    )
    max_ping_time: int = Field(
        ...,
        alias='MaxPingTime',
        description='Maximum time (in milliseconds) the server will wait between ping messages from client before shutting down.',
        ge=0,
    )


class SingleMotorVibrateCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    speed: float = Field(
        ...,
        alias='Speed',
        description='Device vibration speed (floating point, 0 < x < 1), stepping will be device specific.',
        ge=0.0,
        le=1.0,
    )


class StartScanning(RootModel[ClientIdMessage]):
    root: ClientIdMessage = Field(
        ..., description='Request for the server to start scanning for new devices.'
    )


class StopAllDevices(RootModel[ClientIdMessage]):
    root: ClientIdMessage = Field(
        ...,
        description='Stops all actions currently being taken by all connected devices.',
    )


class StopDeviceCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')


class StopScanning(RootModel[ClientIdMessage]):
    root: ClientIdMessage = Field(
        ..., description='Request for the server to stop scanning for new devices.'
    )


class Test(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    test_string: str = Field(
        ...,
        alias='TestString',
        description="String to be echo'd back from server. Setting this to 'Error' will cause an error to be thrown.",
    )


class VorzeA10CycloneCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    speed: int = Field(
        ...,
        alias='Speed',
        description='Rotation speed command for the Cyclone.',
        ge=0,
        le=100,
    )
    clockwise: bool = Field(
        ...,
        alias='Clockwise',
        description='True for clockwise rotation (in relation to device facing user), false for Counter-clockwise',
    )


class LinearCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    vectors: List[Vector] = Field(
        ...,
        alias='Vectors',
        description='Device linear movement times (milliseconds) and positions (floating point, 0 < x < 1) keyed on linear actuator number, stepping will be device specific.',
    )


class RequestServerInfoModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    client_name: str = Field(
        ..., alias='ClientName', description='Name of the client software.'
    )
    message_version: int = Field(
        ...,
        alias='MessageVersion',
        description='Message template version of the client software.',
        ge=0,
    )


class RotateCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    rotations: List[Rotation] = Field(
        ...,
        alias='Rotations',
        description='Device rotation speeds (floating point, 0 < x < 1) keyed on rotator number, stepping will be device specific.',
        min_length=1,
    )


class VibrateCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    speeds: List[Speed] = Field(
        ...,
        alias='Speeds',
        description='Device vibration speeds (floating point, 0 < x < 1) keyed on vibrator number, stepping will be device specific.',
        min_length=1,
    )


class BatteryLevelCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')


class BatteryLevelReading(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    battery_level: float = Field(
        ..., alias='BatteryLevel', description='Battery Level', ge=0.0, le=1.0
    )


class RSSILevelCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')


class RSSILevelReading(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    rssi_level: float = Field(
        ..., alias='RSSILevel', description='RSSI Level', ge=0.0, le=1.0
    )


class RawReadCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    endpoint: str = Field(
        ...,
        alias='Endpoint',
        description='Endpoint (from device config file) from which the data was retrieved.',
    )
    length: int = Field(
        ...,
        alias='Length',
        description='Amount of data to read from device, 0 to exhaust whatever is in immediate buffer',
        ge=0,
    )
    wait_for_data: bool = Field(
        ...,
        alias='WaitForData',
        description='If true, then wait until Length amount of data is available.',
    )


class RawReading(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ServerId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    endpoint: str = Field(
        ...,
        alias='Endpoint',
        description='Endpoint (from device config file) from which the data was retrieved.',
    )
    data: List[Datum] = Field(
        ...,
        alias='Data',
        description='Raw byte string received from device.',
        min_length=1,
    )


class RawSubscribeCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    endpoint: str = Field(
        ...,
        alias='Endpoint',
        description='Endpoint (from device config file) from which the data was retrieved.',
    )


class RawUnsubscribeCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    endpoint: str = Field(
        ...,
        alias='Endpoint',
        description='Endpoint (from device config file) from which the data was retrieved.',
    )


class RawWriteCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    endpoint: str = Field(
        ...,
        alias='Endpoint',
        description='Endpoint (from device config file) to send command to.',
    )
    data: List[Datum] = Field(
        ...,
        alias='Data',
        description='Raw byte string to send to device.',
        min_length=1,
    )
    write_with_response: bool = Field(
        ...,
        alias='WriteWithResponse',
        description='If true, BLE writes will use WriteWithResponse. Value ignored for all other types.',
    )


class ServerInfoModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    server_name: str = Field(
        ..., alias='ServerName', description='Name of the server. Can be 0-length.'
    )
    message_version: int = Field(
        ...,
        alias='MessageVersion',
        description='Message template version of the server software.',
        ge=0,
    )
    max_ping_time: int = Field(
        ...,
        alias='MaxPingTime',
        description='Maximum time (in milliseconds) the server will wait between ping messages from client before shutting down.',
        ge=0,
    )


class ScalarCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    scalars: List[Scalar] = Field(
        ...,
        alias='Scalars',
        description='Device actution scalar (floating point, range can vary) keyed on acutator index, stepping will be device specific.',
        min_length=1,
    )


class SensorReadCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    sensor_index: int = Field(..., alias='SensorIndex')
    sensor_type: str = Field(..., alias='SensorType')


class SensorReading(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ServerId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    sensor_index: int = Field(..., alias='SensorIndex')
    sensor_type: str = Field(..., alias='SensorType')
    data: List[Datum] = Field(..., alias='Data')


class SensorSubscribeCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    sensor_index: int = Field(..., alias='SensorIndex')
    sensor_type: str = Field(..., alias='SensorType')


class SensorUnsubscribeCmd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    sensor_index: int = Field(..., alias='SensorIndex')
    sensor_type: str = Field(..., alias='SensorType')


class GenericMessageAttributesV1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    feature_count: FeatureCount | None = Field(None, alias='FeatureCount')


class GenericMessageAttributesV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    feature_count: FeatureCount | None = Field(None, alias='FeatureCount')
    step_count: StepCountV2 | None = Field(None, alias='StepCount')


class GenericMessageAttributesV3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    feature_descriptor: str | None = Field(None, alias='FeatureDescriptor')
    step_count: StepCountV3 | None = Field(None, alias='StepCount')
    actuator_type: str | None = Field(
        None,
        alias='ActuatorType',
        description='Denotes type of actuator (Vibrator, Linear, Oscillator, etc...)',
    )


class SensorMessageAttributes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sensor_type: str = Field(..., alias='SensorType')
    feature_descriptor: str = Field(..., alias='FeatureDescriptor')
    sensor_range: List[RangeInclusive] = Field(..., alias='SensorRange', min_length=1)


class MessageSpecV0Item(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    device_list: DeviceList | None = Field(None, alias='DeviceList')
    device_added: DeviceAdded | None = Field(None, alias='DeviceAdded')
    device_removed: DeviceRemoved | None = Field(None, alias='DeviceRemoved')
    error: Error | None = Field(None, alias='Error')
    log: Log | None = Field(None, alias='Log')
    ok: Ok | None = Field(None, alias='Ok')
    ping: Ping | None = Field(None, alias='Ping')
    request_device_list: RequestDeviceList | None = Field(
        None, alias='RequestDeviceList'
    )
    request_log: RequestLog | None = Field(None, alias='RequestLog')
    request_server_info: RequestServerInfo | None = Field(
        None, alias='RequestServerInfo'
    )
    server_info: ServerInfo | None = Field(None, alias='ServerInfo')
    start_scanning: StartScanning | None = Field(None, alias='StartScanning')
    stop_all_devices: StopAllDevices | None = Field(None, alias='StopAllDevices')
    stop_device_cmd: StopDeviceCmd | None = Field(None, alias='StopDeviceCmd')
    stop_scanning: StopScanning | None = Field(None, alias='StopScanning')
    test: Test | None = Field(None, alias='Test')
    fleshlight_launch_fw12_cmd: FleshlightLaunchFW12Cmd | None = Field(
        None, alias='FleshlightLaunchFW12Cmd'
    )
    kiiroo_cmd: KiirooCmd | None = Field(None, alias='KiirooCmd')
    single_motor_vibrate_cmd: SingleMotorVibrateCmd | None = Field(
        None, alias='SingleMotorVibrateCmd'
    )
    vorze_a10_cyclone_cmd: VorzeA10CycloneCmd | None = Field(
        None, alias='VorzeA10CycloneCmd'
    )


class MessageSpecV0(RootModel[List[MessageSpecV0Item]]):
    root: List[MessageSpecV0Item] = Field(..., min_length=1)


class DeviceMessagesV1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    stop_device_cmd: NullMessageAttributes | None = Field(None, alias='StopDeviceCmd')
    vibrate_cmd: GenericMessageAttributesV1 | None = Field(None, alias='VibrateCmd')
    linear_cmd: GenericMessageAttributesV1 | None = Field(None, alias='LinearCmd')
    rotate_cmd: GenericMessageAttributesV1 | None = Field(None, alias='RotateCmd')
    lovense_cmd: NullMessageAttributes | None = Field(None, alias='LovenseCmd')
    vorze_a10_cyclone_cmd: NullMessageAttributes | None = Field(
        None, alias='VorzeA10CycloneCmd'
    )
    kiiroo_cmd: NullMessageAttributes | None = Field(None, alias='KiirooCmd')
    single_motor_vibrate_cmd: NullMessageAttributes | None = Field(
        None, alias='SingleMotorVibrateCmd'
    )
    fleshlight_launch_fw12_cmd: NullMessageAttributes | None = Field(
        None, alias='FleshlightLaunchFW12Cmd'
    )


class DeviceMessagesV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    stop_device_cmd: NullMessageAttributes | None = Field(None, alias='StopDeviceCmd')
    vibrate_cmd: GenericMessageAttributesV2 | None = Field(None, alias='VibrateCmd')
    linear_cmd: GenericMessageAttributesV2 | None = Field(None, alias='LinearCmd')
    rotate_cmd: GenericMessageAttributesV2 | None = Field(None, alias='RotateCmd')
    battery_level_cmd: NullMessageAttributes | None = Field(
        None, alias='BatteryLevelCmd'
    )
    rssi_level_cmd: NullMessageAttributes | None = Field(None, alias='RSSILevelCmd')
    raw_read_cmd: RawMessageAttributes | None = Field(None, alias='RawReadCmd')
    raw_write_cmd: RawMessageAttributes | None = Field(None, alias='RawWriteCmd')
    raw_subscribe_cmd: RawMessageAttributes | None = Field(
        None, alias='RawSubscribeCmd'
    )
    raw_unsubscribe_cmd: RawMessageAttributes | None = Field(
        None, alias='RawUnsubscribeCmd'
    )


class LinearCmdItem(RootModel[GenericMessageAttributesV3]):
    root: GenericMessageAttributesV3 = Field(..., min_length=1)


class RotateCmdItem(RootModel[GenericMessageAttributesV3]):
    root: GenericMessageAttributesV3 = Field(..., min_length=1)


class SensorReadCmdItem(RootModel[SensorMessageAttributes]):
    root: SensorMessageAttributes = Field(..., min_length=1)


class SensorSubscribeCmdItem(RootModel[SensorMessageAttributes]):
    root: SensorMessageAttributes = Field(..., min_length=1)


class DeviceMessagesV3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    stop_device_cmd: NullMessageAttributes | None = Field(None, alias='StopDeviceCmd')
    scalar_cmd: List[GenericMessageAttributesV3] | None = Field(
        None, alias='ScalarCmd', min_length=1
    )
    linear_cmd: List[LinearCmdItem] | None = Field(None, alias='LinearCmd')
    rotate_cmd: List[RotateCmdItem] | None = Field(None, alias='RotateCmd')
    sensor_read_cmd: List[SensorReadCmdItem] | None = Field(None, alias='SensorReadCmd')
    sensor_subscribe_cmd: List[SensorSubscribeCmdItem] | None = Field(
        None, alias='SensorSubscribeCmd'
    )
    raw_read_cmd: RawMessageAttributes | None = Field(None, alias='RawReadCmd')
    raw_write_cmd: RawMessageAttributes | None = Field(None, alias='RawWriteCmd')
    raw_subscribe_cmd: RawMessageAttributes | None = Field(
        None, alias='RawSubscribeCmd'
    )


class DeviceAddedModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: SystemId = Field(..., alias='Id')
    device_name: DeviceName = Field(..., alias='DeviceName')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    device_messages: DeviceMessagesV1 = Field(..., alias='DeviceMessages')


class Device1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    device_name: DeviceName = Field(..., alias='DeviceName')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    device_messages: DeviceMessagesV1 = Field(..., alias='DeviceMessages')


class DeviceListModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    devices: List[Device1] = Field(
        ..., alias='Devices', description='Array of device ids and names.'
    )


class DeviceAddedModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: SystemId = Field(..., alias='Id')
    device_name: DeviceName = Field(..., alias='DeviceName')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    device_messages: DeviceMessagesV2 = Field(..., alias='DeviceMessages')


class Device2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    device_name: DeviceName = Field(..., alias='DeviceName')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    device_messages: DeviceMessagesV2 = Field(..., alias='DeviceMessages')


class DeviceListModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    devices: List[Device2] = Field(
        ..., alias='Devices', description='Array of device ids and names.'
    )


class DeviceAddedModel2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: SystemId = Field(..., alias='Id')
    device_name: DeviceName = Field(..., alias='DeviceName')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    device_display_name: str | None = Field(None, alias='DeviceDisplayName')
    device_message_timing_gap: int | None = Field(None, alias='DeviceMessageTimingGap')
    device_messages: DeviceMessagesV3 = Field(..., alias='DeviceMessages')


class Device3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    device_name: DeviceName = Field(..., alias='DeviceName')
    device_index: DeviceIndex = Field(..., alias='DeviceIndex')
    device_display_name: str | None = Field(None, alias='DeviceDisplayName')
    device_message_timing_gap: int | None = Field(None, alias='DeviceMessageTimingGap')
    device_messages: DeviceMessagesV3 = Field(..., alias='DeviceMessages')


class DeviceListModel2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: ClientId = Field(..., alias='Id')
    devices: List[Device3] = Field(
        ..., alias='Devices', description='Array of device ids and names.'
    )


class MessageSpecV1Item(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    device_list: DeviceListModel | None = Field(None, alias='DeviceList')
    device_added: DeviceAddedModel | None = Field(None, alias='DeviceAdded')
    device_removed: DeviceRemoved | None = Field(None, alias='DeviceRemoved')
    error: Error | None = Field(None, alias='Error')
    fleshlight_launch_fw12_cmd: FleshlightLaunchFW12Cmd | None = Field(
        None, alias='FleshlightLaunchFW12Cmd'
    )
    kiiroo_cmd: KiirooCmd | None = Field(None, alias='KiirooCmd')
    linear_cmd: LinearCmd | None = Field(None, alias='LinearCmd')
    log: Log | None = Field(None, alias='Log')
    ok: Ok | None = Field(None, alias='Ok')
    ping: Ping | None = Field(None, alias='Ping')
    request_device_list: RequestDeviceList | None = Field(
        None, alias='RequestDeviceList'
    )
    request_log: RequestLog | None = Field(None, alias='RequestLog')
    request_server_info: RequestServerInfoModel | None = Field(
        None, alias='RequestServerInfo'
    )
    rotate_cmd: RotateCmd | None = Field(None, alias='RotateCmd')
    server_info: ServerInfo | None = Field(None, alias='ServerInfo')
    start_scanning: StartScanning | None = Field(None, alias='StartScanning')
    stop_all_devices: StopAllDevices | None = Field(None, alias='StopAllDevices')
    stop_device_cmd: StopDeviceCmd | None = Field(None, alias='StopDeviceCmd')
    stop_scanning: StopScanning | None = Field(None, alias='StopScanning')
    test: Test | None = Field(None, alias='Test')
    vibrate_cmd: VibrateCmd | None = Field(None, alias='VibrateCmd')
    vorze_a10_cyclone_cmd: VorzeA10CycloneCmd | None = Field(
        None, alias='VorzeA10CycloneCmd'
    )


class MessageSpecV1(RootModel[List[MessageSpecV1Item]]):
    root: List[MessageSpecV1Item] = Field(..., min_length=1)


class MessageSpecV2Item(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    battery_level_cmd: BatteryLevelCmd | None = Field(None, alias='BatteryLevelCmd')
    battery_level_reading: BatteryLevelReading | None = Field(
        None, alias='BatteryLevelReading'
    )
    device_list: DeviceListModel1 | None = Field(None, alias='DeviceList')
    device_added: DeviceAddedModel1 | None = Field(None, alias='DeviceAdded')
    device_removed: DeviceRemoved | None = Field(None, alias='DeviceRemoved')
    error: Error | None = Field(None, alias='Error')
    linear_cmd: LinearCmd | None = Field(None, alias='LinearCmd')
    ok: Ok | None = Field(None, alias='Ok')
    ping: Ping | None = Field(None, alias='Ping')
    raw_read_cmd: RawReadCmd | None = Field(None, alias='RawReadCmd')
    raw_reading: RawReading | None = Field(None, alias='RawReading')
    raw_write_cmd: RawWriteCmd | None = Field(None, alias='RawWriteCmd')
    raw_subscribe_cmd: RawSubscribeCmd | None = Field(None, alias='RawSubscribeCmd')
    raw_unsubscribe_cmd: RawUnsubscribeCmd | None = Field(
        None, alias='RawUnsubscribeCmd'
    )
    request_device_list: RequestDeviceList | None = Field(
        None, alias='RequestDeviceList'
    )
    request_log: RequestLog | None = Field(None, alias='RequestLog')
    request_server_info: RequestServerInfoModel | None = Field(
        None, alias='RequestServerInfo'
    )
    rotate_cmd: RotateCmd | None = Field(None, alias='RotateCmd')
    rssi_level_cmd: RSSILevelCmd | None = Field(None, alias='RSSILevelCmd')
    rssi_level_reading: RSSILevelReading | None = Field(None, alias='RSSILevelReading')
    scanning_finished: ScanningFinished | None = Field(None, alias='ScanningFinished')
    server_info: ServerInfoModel | None = Field(None, alias='ServerInfo')
    start_scanning: StartScanning | None = Field(None, alias='StartScanning')
    stop_all_devices: StopAllDevices | None = Field(None, alias='StopAllDevices')
    stop_device_cmd: StopDeviceCmd | None = Field(None, alias='StopDeviceCmd')
    stop_scanning: StopScanning | None = Field(None, alias='StopScanning')
    vibrate_cmd: VibrateCmd | None = Field(None, alias='VibrateCmd')


class MessageSpecV2(RootModel[List[MessageSpecV2Item]]):
    root: List[MessageSpecV2Item] = Field(..., min_length=1)


class MessageSpecV3Item(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    device_list: DeviceListModel2 | None = Field(None, alias='DeviceList')
    device_added: DeviceAddedModel2 | None = Field(None, alias='DeviceAdded')
    device_removed: DeviceRemoved | None = Field(None, alias='DeviceRemoved')
    error: Error | None = Field(None, alias='Error')
    scalar_cmd: ScalarCmd | None = Field(None, alias='ScalarCmd')
    linear_cmd: LinearCmd | None = Field(None, alias='LinearCmd')
    ok: Ok | None = Field(None, alias='Ok')
    ping: Ping | None = Field(None, alias='Ping')
    raw_read_cmd: RawReadCmd | None = Field(None, alias='RawReadCmd')
    raw_reading: RawReading | None = Field(None, alias='RawReading')
    raw_write_cmd: RawWriteCmd | None = Field(None, alias='RawWriteCmd')
    raw_subscribe_cmd: RawSubscribeCmd | None = Field(None, alias='RawSubscribeCmd')
    raw_unsubscribe_cmd: RawUnsubscribeCmd | None = Field(
        None, alias='RawUnsubscribeCmd'
    )
    request_device_list: RequestDeviceList | None = Field(
        None, alias='RequestDeviceList'
    )
    request_server_info: RequestServerInfoModel | None = Field(
        None, alias='RequestServerInfo'
    )
    rotate_cmd: RotateCmd | None = Field(None, alias='RotateCmd')
    scanning_finished: ScanningFinished | None = Field(None, alias='ScanningFinished')
    sensor_read_cmd: SensorReadCmd | None = Field(None, alias='SensorReadCmd')
    sensor_reading: SensorReading | None = Field(None, alias='SensorReading')
    sensor_subscribe_cmd: SensorSubscribeCmd | None = Field(
        None, alias='SensorSubscribeCmd'
    )
    sensor_unsubscribe_cmd: SensorUnsubscribeCmd | None = Field(
        None, alias='SensorUnsubscribeCmd'
    )
    server_info: ServerInfoModel | None = Field(None, alias='ServerInfo')
    start_scanning: StartScanning | None = Field(None, alias='StartScanning')
    stop_all_devices: StopAllDevices | None = Field(None, alias='StopAllDevices')
    stop_device_cmd: StopDeviceCmd | None = Field(None, alias='StopDeviceCmd')
    stop_scanning: StopScanning | None = Field(None, alias='StopScanning')


class MessageSpecV3(RootModel[List[MessageSpecV3Item]]):
    root: List[MessageSpecV3Item] = Field(..., min_length=1)


class ButtplugMessageSchema(
    RootModel[MessageSpecV3 | MessageSpecV2 | MessageSpecV1 | MessageSpecV0]
):
    root: MessageSpecV3 | MessageSpecV2 | MessageSpecV1 | MessageSpecV0 = Field(
        ...,
        description='The JSON Protocol format for the Buttplug Protocol.',
        title='Buttplug Message Schema',
    )
